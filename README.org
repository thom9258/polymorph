* Polymorph

A tiny, easy to use functional piping library.

** Why
This library explores a functional oriented approach to managing and modifying collections.
'polymorph' provides a functional-style piping syntax, in order to express complex data transformation as sequential steps.
The resulting code becomes clean and easy to understand, compared to large & obfuscated loop constructs by leveraging standardized higher-order functions that are highly composeable using simple sub-algorithms and predicates.

A simple example, given a collection of people, collect the names of all males over 30 and print them.
#+begin_src cpp
const auto male_names_over_30 = people >>= polymorph::filter(is_male)
                                       >>= polymorph::filter(is_over_30)
                                       >>= polymorph::transform(take_name);

male_names_over_30 >>= polymorph::to_stream(std::cout, ", ", "\n");
#+end_src

** How to Install
   
*** FetchContent_Declare
For a quick setup, simply fetch using:

#+begin_src cmake
include(FetchContent)
message(STATUS "Fetching polymorph")
FetchContent_Declare(polymorph
    GIT_REPOSITORY git@github.com:thom9258/polymorph.git
    GIT_TAG main
    GIT_SHALLOW TRUE
    GIT_PROGRESS TRUE
)
FetchContent_MakeAvailable(polymorph)
target_link_libraries(${PROJECT_NAME} PRIVATE polymorph)
#+end_src

*** add_subdirectory()
Alternatively, the package can be cloned manually:

#+begin_src bash
cd path/to/your/project
mkdir thirdparty
cd thirdparty
git clone git@github.com:thom9258/polymorph.git
#+end_src

Then in your CMakeLists.txt, add
#+begin_src cmake
add_subdirectory(../thirdparty/polymorph)
target_link_libraries(${PROJECT_NAME} PRIVATE polymorph::polymorph)
#+end_src

*** find_package()

the package can be installed by:
#+begin_src bash
cd path/to/thirdparty/libraries
git clone git@github.com:thom9258/polymorph.git
cd polymorph
mkdir build
cd build
cmake ..
cmake --build . --config Release --target install -- -j $(nproc)
#+end_src

alternatively, a custom install-prefix can be specified:
#+begin_src bash
cmake .. -DCMAKE_INSTALL_PREFIX:PATH=/your/installation/path
cmake --build . --config Release --target install -- -j $(nproc)
#+end_src

Then, in your CMakeLists.txt, the package can be found using:
#+begin_src cmake
find_package(polymorph
    CONFIG REQUIRED
    PATHS "../build/install" NO_DEFAULT_PATH)

target_link_libraries(${PROJECT_NAME} PRIVATE polymorph::polymorph)
#+end_src

*** Example
*Problem:*
You are given a collection of people, and are tasked with:
1. Find all males that are older than 30
2. Remember their original indexes in the collection
3. Remove information, so only the original information and their names are kept
3. Store and print the resulting sub-collection
   
Initially, this problem would be solveable by simply iterating through the collection of people:
#+begin_src cpp
// PROBLEM: non-const temporary variable
std::vector<indexed_person>> males_over_30{};
// PROBLEM: error-prone usage of index
for (size_t i = 0; i < people.size(); i++) {
    // PROBLEM: conditional branching based on multiple-cases in if
    if (!is_male(people[i]) && !is_over_30(people[i])))
	    continue;
    // PROBLEM: modification of values in another place
	males_over_30.push_back({i, people[i]});
	

// PROBLEM: error-prone useage of index
for (size_t i = 0; i < males_over_30.size(); i++) {
    std::cout << stringify_indexed_name(males_over_30[i]);
	// PROBLEM: manual handling to omit the trailing seperator
	// PROBLEM: error-prone extensive logic using both index and size-based values
	if (i < males_over_30.size()-1)
	    << ", ";
}
// PROBLEM: multiple printing locations
std::cout << "\n";
#+end_src

But suddently, a new criteria is found for the algorithm, maybe another algorithm needs to be created that does the same, but looks for females under 50 instead.
A simple solution to the problem suddently grows in complexity, deviates in requirements and are now considered really complex to maintain as you would need to enforce new tests to ensure the logic still works.

The solution using composition of simple filters and transforms:
#+begin_src cpp
const auto indexed_males_over_30 = people >>= polymorph::enumerate()
	                                      >>= polymorph::filter(is_male)
	                                      >>= polymorph::filter(is_over_30)
	                                      >>= polymorph::transform(take_indexed_name)
	                                      >>= polymorph::transform(stringify_indexed_name);

indexed_males_over_30 >>= polymorph::to_stream(std::cout, ", ", "\n");
#+end_src

When a new sorting requirement is set, or a slight deviation in logic occours, changing the original algorithm becomes trivial.
All you need to do is just add another transform, modify a filter, and you are good to go. 
The code is by definiton also more explicit and self-documenting compared to a traditional iteration. You would be required to know the name of the function that iteration is inside of, or look for comments & documentation to explicitly tell you that we are reducing a collection into males over 30.
With composed pipes, this becomes trivial, the code loudly explains that we are taking elements based on some criteria, and transforming them according to the functions provided.
In addition to readability, we are also more secure against common bugs that occour when handling multiple temporary variables, that are in this case not even able to be const, as they needs to be modified inside of loops where we specified the iteration lengths ourselves.


