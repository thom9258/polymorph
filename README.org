* Polymorph

A tiny, easy to use functional piping library.

#+begin_src cpp
const auto male_names_over_30 = people >>= polymorph::filter(is_male)
                                       >>= polymorph::filter(is_over_30)
                                       >>= polymorph::transform(take_name);

male_names_over_30 >>= polymorph::to_stream(std::cout, ", ", "\n");
#+end_src

This library explores a functional oriented approach to manage and modify collections with a piping syntax.
Use 'polymorph' to structure complex data transformations in simple & readable steps, compared to large & obfuscated loop constructs, by leveraging standardized & composeable higher-order functions with simple sub-algorithms and predicates.

** Quick Setup

For a quick setup using cmake, simply fetch using:
#+begin_src cmake
include(FetchContent)
message(STATUS "Fetching polymorph")
FetchContent_Declare(polymorph
    GIT_REPOSITORY git@github.com:thom9258/polymorph.git
    GIT_TAG main
    GIT_SHALLOW TRUE
    GIT_PROGRESS TRUE
)
FetchContent_MakeAvailable(polymorph)
target_link_libraries(${PROJECT_NAME} PRIVATE polymorph)
#+end_src

** Install

The package can be installed by:
#+begin_src bash
cd path/to/thirdparty/libraries
git clone git@github.com:thom9258/polymorph.git
cd polymorph
mkdir build
cd build
cmake ..
cmake --build . --config Release --target install -- -j $(nproc)
#+end_src

alternatively, a custom install-prefix can be specified:
#+begin_src bash
cmake .. -DCMAKE_INSTALL_PREFIX:PATH=/your/installation/path
cmake --build . --config Release --target install -- -j $(nproc)
#+end_src

Then, in your CMakeLists.txt, the package can be found using:
#+begin_src cmake
find_package(polymorph
    CONFIG REQUIRED
    PATHS "../build/install" NO_DEFAULT_PATH)

target_link_libraries(${PROJECT_NAME} PRIVATE polymorph::polymorph)
#+end_src

*** Why Use Polymorph

You are tasked with investigating a function deep in your codebase, you see this:
#+begin_src cpp
std::vector<indexed_person>> males_over_30{};                // (1)
for (size_t i = 0; i < people.size(); i++) {                 // (2)
    if (!is_male(people[i]) && !is_over_30(people[i])))      // (3)
	    continue;
	males_over_30.push_back({i, people[i].name});
}

for (size_t i = 0; i < males_over_30.size(); i++) {          // (1)
    std::cout << stringify_indexed_name(males_over_30[i]);   // (4)
	if (i < males_over_30.size()-1)                          // (5)
	    std::cout << ", ";
}
std::cout << "\n";
return males_over_30;
#+end_src

Immediately a series of problems can be identified with this approach:
1. A non-const collection is created before-hand, and it is required to specify its type
2. We are manually iterating a collection based on its size
3. Core filtering logic, the most important part of this function is deeply embedded in iteration and branching
4. The output of this function (streaming to std::cout) is scattered to 3 different locations
5. Manual handling is required to omit the last seperator to return
   
The polymorph solution adresses all 5 problems:
#+begin_src cpp
const auto indexed_males_over_30 = people >>= polymorph::enumerate()
                                          >>= polymorph::filter(is_male)
                                          >>= polymorph::filter(is_over_30)
                                          >>= polymorph::transform(take_indexed_name)
                                          >>= polymorph::transform(stringify_indexed_name);

indexed_males_over_30 >>= polymorph::to_stream(std::cout, ", ", "\n");
#+end_src

In 'polymorph', complex looping, filtering, temporary variable creation is condensed down to a simple series of individual commands.
Maintanence and modification is as trivial as adding, removing or modifying a step in the pipeline.
